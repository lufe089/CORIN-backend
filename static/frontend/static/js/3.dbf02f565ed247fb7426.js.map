{"version":3,"sources":["webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/map/SmallMap.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/map/ZoomControl.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/responsive/ResponsiveDefaults.js"],"names":["SmallMap_SmallMap","_super","SmallMap","_this","call","this","_chart","Disposer","className","align","valign","percentHeight","percentWidth","margin","interfaceColors","InterfaceColorSet","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","Container","shouldClone","rectangle","Rectangle","stroke","strokeWidth","strokeOpacity","Object","Color","verticalCenter","horizontalCenter","isMeasured","_disposers","push","applyTheme","tslib_es6","defineProperty","prototype","get","_series","List","handleSeriesAdded","handleSeriesRemoved","enumerable","configurable","event","series","newValue","chart","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","invalidate","svgPoint","rectPoint","Utils","zoomLevel","scale","Math","min","x","pixelWidth","y","pixelHeight","geoPoint","svgPointToGeo","zoomToGeoPoint","set","updateRectangle","width","height","ceil","pixelX","pixelY","scaleRatio","afterDraw","moveTo","maskRectangle","processConfig","config","Type","i","len","length","map","hasKey","getKey","Registry","registeredClasses","ZoomControl_ZoomControl","ZoomControl","layout","padding","plusButton","Button","label","text","Percent","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","Interaction","body","ev","topParent","hasFocused","Keyboard","isKey","isFocused","zoomIn","minHeight","stepCount","visible","minWidth","isDown","step","createBackground","RoundedRectangle","__webpack_exports__","relevant","container","state","object","stateId","AxisRenderer","states","create","properties","minLabelPosition","maxLabelPosition","AxisRendererY","inside","AxisRendererCircular","disabled","Chart","Legend","position","AxisRendererX"],"mappings":"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","file":"static/js/3.dbf02f565ed247fb7426.js","sourcesContent":["/**\r\n * A module for the mini-map control.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SmallMap = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SmallMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SmallMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A target map.\r\n         *\r\n         * @type {MutableValueDisposer<MapChart>}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"SmallMap\";\r\n        // Set defaults\r\n        _this.align = \"left\";\r\n        _this.valign = \"bottom\";\r\n        _this.percentHeight = 20;\r\n        _this.percentWidth = 20;\r\n        _this.margin(5, 5, 5, 5);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Set background defailts\r\n        _this.background.fillOpacity = 0.9;\r\n        _this.background.fill = interfaceColors.getFor(\"background\");\r\n        // Set up events\r\n        _this.events.on(\"hit\", _this.moveToPosition, _this);\r\n        _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this);\r\n        // Create a container\r\n        _this.seriesContainer = _this.createChild(Container);\r\n        _this.seriesContainer.shouldClone = false;\r\n        // Create an outline rectangle\r\n        var rectangle = _this.createChild(Rectangle);\r\n        rectangle.shouldClone = false;\r\n        rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n        rectangle.strokeWidth = 1;\r\n        rectangle.strokeOpacity = 0.5;\r\n        rectangle.fill = color(); //\"none\";\r\n        rectangle.verticalCenter = \"middle\";\r\n        rectangle.horizontalCenter = \"middle\";\r\n        rectangle.isMeasured = false;\r\n        _this.rectangle = rectangle;\r\n        _this._disposers.push(_this._chart);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SmallMap.prototype, \"series\", {\r\n        /**\r\n         * A list of map series used to draw the mini-map.\r\n         *\r\n         * @readonly\r\n         * @return {List<MapSeries>} Series\r\n         */\r\n        get: function () {\r\n            if (!this._series) {\r\n                this._series = new List();\r\n                this._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n                this._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new series when they are pushed into a `series` list.\r\n     *\r\n     * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n     */\r\n    SmallMap.prototype.handleSeriesAdded = function (event) {\r\n        var series = event.newValue;\r\n        if (this.chart.series.contains(series)) {\r\n            var newSeries = series.clone();\r\n            this._series.removeValue(series);\r\n            this._series.push(newSeries);\r\n            series = newSeries;\r\n            this.chart.dataUsers.push(newSeries);\r\n        }\r\n        series.chart = this.chart;\r\n        series.parent = this.seriesContainer;\r\n        series.interactionsEnabled = false;\r\n    };\r\n    /**\r\n     * Cleans up after series are removed from Scrollbar.\r\n     *\r\n     * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n     */\r\n    SmallMap.prototype.handleSeriesRemoved = function (event) {\r\n        //let sourceSeries: MapSeries = event.oldValue;\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Moves main map pan position after click on the small map.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n     */\r\n    SmallMap.prototype.moveToPosition = function (event) {\r\n        var svgPoint = event.svgPoint;\r\n        var rectPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n        var zoomLevel = this.chart.zoomLevel;\r\n        var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n        var x = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n        var y = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n        var geoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n        this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n    };\r\n    Object.defineProperty(SmallMap.prototype, \"chart\", {\r\n        /**\r\n         * @return {MapChart} Chart/map\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart/map that this control is meant for.\r\n         *\r\n         * @param {MapChart}  chart  Chart/map\r\n         */\r\n        set: function (chart) {\r\n            if (this.chart != chart) {\r\n                this._chart.set(chart, new MultiDisposer([\r\n                    chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n                    chart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n                    chart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the viewport recangle as per current map zoom/pan position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SmallMap.prototype.updateRectangle = function () {\r\n        var chart = this.chart;\r\n        var zoomLevel = chart.zoomLevel;\r\n        var rectangle = this.rectangle;\r\n        rectangle.width = this.pixelWidth / zoomLevel;\r\n        rectangle.height = this.pixelHeight / zoomLevel;\r\n        var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n        var seriesContainer = chart.seriesContainer;\r\n        var x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n        var y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n        rectangle.x = x;\r\n        rectangle.y = y;\r\n    };\r\n    /**\r\n     * Update map size so that internal elements can redraw themselves after\r\n     * the size of the small map changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SmallMap.prototype.updateMapSize = function () {\r\n        if (this.chart) {\r\n            this.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n            this.afterDraw();\r\n        }\r\n    };\r\n    /**\r\n     * Update elements after drawing the small map.\r\n     */\r\n    SmallMap.prototype.afterDraw = function () {\r\n        _super.prototype.afterDraw.call(this);\r\n        this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n        this.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    SmallMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    var series = config.series[i];\r\n                    if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n                        config.series[i] = this.map.getKey(series);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return SmallMap;\r\n}(Container));\r\nexport { SmallMap };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n//# sourceMappingURL=SmallMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@amcharts/amcharts4/.internal/charts/map/SmallMap.js\n// module id = null\n// module chunks = ","/**\r\n * Zoom control module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ZoomControl = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ZoomControl, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ZoomControl() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A target map.\r\n         *\r\n         * @type {MutableValueDisposer<MapChart>}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"ZoomControl\";\r\n        _this.align = \"right\";\r\n        _this.valign = \"bottom\";\r\n        _this.layout = \"vertical\";\r\n        _this.padding(5, 5, 5, 5);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var plusButton = _this.createChild(Button);\r\n        plusButton.shouldClone = false;\r\n        plusButton.label.text = \"+\";\r\n        plusButton.width = percent(100);\r\n        plusButton.padding(5, 5, 5, 5);\r\n        plusButton.fontFamily = \"Verdana\";\r\n        _this.plusButton = plusButton;\r\n        var slider = _this.createChild(Container);\r\n        slider.shouldClone = false;\r\n        slider.width = percent(100);\r\n        slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        slider.background.fillOpacity = 0.05;\r\n        slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this);\r\n        slider.events.on(\"sizechanged\", _this.updateThumbSize, _this);\r\n        _this.slider = slider;\r\n        var thumb = slider.createChild(Button);\r\n        thumb.shouldClone = false;\r\n        thumb.padding(0, 0, 0, 0);\r\n        thumb.draggable = true;\r\n        thumb.events.on(\"drag\", _this.handleThumbDrag, _this);\r\n        _this.thumb = thumb;\r\n        var minusButton = _this.createChild(Button);\r\n        minusButton.shouldClone = false;\r\n        minusButton.label.text = \"-\";\r\n        minusButton.padding(5, 5, 5, 5);\r\n        minusButton.fontFamily = \"Verdana\";\r\n        _this.minusButton = minusButton;\r\n        // Set roles\r\n        _this.thumb.role = \"slider\";\r\n        _this.thumb.readerLive = \"polite\";\r\n        // Set reader text\r\n        _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\r\n        _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\r\n        _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\r\n        _this.applyTheme();\r\n        _this.events.on(\"propertychanged\", function (event) {\r\n            if (event.property == \"layout\") {\r\n                _this.fixLayout();\r\n            }\r\n        });\r\n        _this._disposers.push(_this._chart);\r\n        _this.fixLayout();\r\n        return _this;\r\n    }\r\n    ZoomControl.prototype.fixLayout = function () {\r\n        if (this.layout == \"vertical\") {\r\n            this.width = 40;\r\n            this.height = undefined;\r\n            this.minusButton.width = percent(100);\r\n            this.thumb.width = percent(100);\r\n            this.plusButton.width = percent(100);\r\n            this.slider.width = percent(100);\r\n            this.minusButton.marginTop = 1;\r\n            this.plusButton.marginBottom = 2;\r\n            this.slider.height = 0;\r\n            this.minusButton.toFront();\r\n            this.plusButton.toBack();\r\n            this.thumb.minX = 0;\r\n            this.thumb.maxX = 0;\r\n            this.thumb.minY = 0;\r\n        }\r\n        else if (this.layout == \"horizontal\") {\r\n            this.thumb.minX = 0;\r\n            this.thumb.minY = 0;\r\n            this.thumb.maxY = 0;\r\n            this.height = 40;\r\n            this.width = undefined;\r\n            this.minusButton.height = percent(100);\r\n            this.minusButton.width = 30;\r\n            this.thumb.height = percent(100);\r\n            this.thumb.width = undefined;\r\n            this.plusButton.height = percent(100);\r\n            this.plusButton.width = 30;\r\n            this.slider.height = percent(100);\r\n            this.slider.width = 0;\r\n            this.minusButton.marginLeft = 2;\r\n            this.plusButton.marginRight = 2;\r\n            this.minusButton.toBack();\r\n            this.plusButton.toFront();\r\n        }\r\n    };\r\n    /**\r\n     * Handles zoom operation after clicking on the slider background.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n     */\r\n    ZoomControl.prototype.handleBackgroundClick = function (event) {\r\n        var sprite = event.target;\r\n        var y = event.spritePoint.y;\r\n        var chart = this.chart;\r\n        var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n        var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\r\n        var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n        var zoomLevel = Math.pow(2, power);\r\n        chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n    };\r\n    Object.defineProperty(ZoomControl.prototype, \"chart\", {\r\n        /**\r\n         * @return {MapChart} Map/chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A main chart/map that this zoom control is for.\r\n         *\r\n         * @param {MapChart}  chart  Map/chart\r\n         */\r\n        set: function (chart) {\r\n            var _this = this;\r\n            this._chart.set(chart, new MultiDisposer([\r\n                chart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n                chart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n                this.minusButton.events.on(\"hit\", function () { chart.zoomOut(chart.zoomGeoPoint); }, chart),\r\n                getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                    if (_this.topParent.hasFocused) {\r\n                        if (keyboard.isKey(ev.event, \"enter\")) {\r\n                            if (_this.minusButton.isFocused) {\r\n                                chart.zoomOut();\r\n                            }\r\n                            else if (_this.plusButton.isFocused) {\r\n                                chart.zoomIn();\r\n                            }\r\n                        }\r\n                        else if (keyboard.isKey(ev.event, \"plus\")) {\r\n                            chart.zoomIn();\r\n                        }\r\n                        else if (keyboard.isKey(ev.event, \"minus\")) {\r\n                            chart.zoomOut();\r\n                        }\r\n                    }\r\n                }, chart),\r\n                this.plusButton.events.on(\"hit\", function () { chart.zoomIn(chart.zoomGeoPoint); }, chart)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the slider's thumb size based on the available zoom space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.updateThumbSize = function () {\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var slider = this.slider;\r\n            var thumb = this.thumb;\r\n            if (this.layout == \"vertical\") {\r\n                thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n                thumb.height = slider.pixelHeight / this.stepCount;\r\n                thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n                if (thumb.pixelHeight <= 1) {\r\n                    thumb.visible = false;\r\n                }\r\n                else {\r\n                    thumb.visible = true;\r\n                }\r\n            }\r\n            else {\r\n                thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n                thumb.width = slider.pixelWidth / this.stepCount;\r\n                thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n                if (thumb.pixelWidth <= 1) {\r\n                    thumb.visible = false;\r\n                }\r\n                else {\r\n                    thumb.visible = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates thumb according to current zoom position from map.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.updateThumb = function () {\r\n        var slider = this.slider;\r\n        var chart = this.chart;\r\n        var thumb = this.thumb;\r\n        if (!thumb.isDown) {\r\n            var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n            if (this.layout == \"vertical\") {\r\n                thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n            }\r\n            else {\r\n                thumb.x = slider.pixelWidth * step / this.stepCount;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Zooms the actual map when slider position changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ZoomControl.prototype.handleThumbDrag = function () {\r\n        var slider = this.slider;\r\n        var chart = this.chart;\r\n        var thumb = this.thumb;\r\n        var step;\r\n        var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n        if (this.layout == \"vertical\") {\r\n            step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n        }\r\n        else {\r\n            step = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n        }\r\n        step = minStep + step;\r\n        var zoomLevel = Math.pow(2, step);\r\n        chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n    };\r\n    Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\r\n        /**\r\n         * Returns the step countfor the slider grid according to map's min and max\r\n         * zoom level settings.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {number} Step count\r\n         */\r\n        get: function () {\r\n            return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a background element for slider control.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {this} Background\r\n     */\r\n    ZoomControl.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    return ZoomControl;\r\n}(Container));\r\nexport { ZoomControl };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n//# sourceMappingURL=ZoomControl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@amcharts/amcharts4/.internal/charts/map/ZoomControl.js\n// module id = null\n// module chunks = ","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Microcharts and sparklines\r\n     * W<=100 || H<=100\r\n     * @todo\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRenderer) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.minLabelPosition = 1;\r\n                state.properties.maxLabelPosition = 0;\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Narrow\r\n     * W<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRendererY) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof AxisRendererCircular) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof SmallMap) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n                let state = object.states.create(stateId);\r\n                state.properties.height = 0;\r\n                return state;\r\n            }*/\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.layout = \"vertical\";\r\n                return state;\r\n            }\r\n            if (object instanceof Chart) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.marginLeft = 0;\r\n                state.properties.marginRight = 0;\r\n                return state;\r\n            }\r\n            if (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.position = \"bottom\";\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Short\r\n     * H<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelHeight <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Put vertical axis labels inside\r\n            if (object instanceof AxisRendererX) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof AxisRendererCircular) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.inside = true;\r\n                return state;\r\n            }\r\n            if (object instanceof SmallMap) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n                let state = object.states.create(stateId);\r\n                state.properties.width = 100;\r\n                return state;\r\n            }*/\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.layout = \"horizontal\";\r\n                return state;\r\n            }\r\n            if (object instanceof Chart) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.marginTop = 0;\r\n                state.properties.marginBottom = 0;\r\n                return state;\r\n            }\r\n            if (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.position = \"right\";\r\n                return state;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Super-small\r\n     * W<=200 && H<=200\r\n     */\r\n    {\r\n        relevant: function (container) {\r\n            if ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        state: function (object, stateId) {\r\n            // Hide legend\r\n            if (object instanceof Legend) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n            if (object instanceof ZoomControl) {\r\n                var state = object.states.create(stateId);\r\n                state.properties.disabled = true;\r\n                return state;\r\n            }\r\n        }\r\n    }\r\n];\r\n//# sourceMappingURL=ResponsiveDefaults.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@amcharts/amcharts4/.internal/core/responsive/ResponsiveDefaults.js\n// module id = null\n// module chunks = "],"sourceRoot":""}